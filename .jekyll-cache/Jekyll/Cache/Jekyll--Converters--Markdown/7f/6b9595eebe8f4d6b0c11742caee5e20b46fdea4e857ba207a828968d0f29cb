I"[<p>[백준] 2156번 포도주 시식
<!--more--></p>
<h1 id="백준-2156번-포도주-시식">[백준] 2156번 포도주 시식</h1>

<p><a href="https://www.acmicpc.net/problem/2156">백준 2156번 </a></p>

<p>dp문제 중 하나입니다. 해당 문제는 브루트 포스로도 풀 수 있지만 시간상 최적화를 해야하는 문제 입니다. 따라서 문제에서 최적해를 찾을 수 있는 공식을 찾아야합니다. <br />
 포도주는 3번 연속으로 마실 수 없으니 다음과 같이 생각할 수 있습니다. 마지막 포도주를 마신다고 하였을 때</p>
<ol>
  <li>마지막 이전의 포도주를 마신다.
    <blockquote>
      <p><code class="highlighter-rouge">dp[n] = arr[n] + arr[n-1] + dp[n-3]</code> <br />
마지막에 연달아 마셨으므로 마지막에서 뒤로 세번째 포도주는 마실 수 없습니다. 따라서 4번째 까지 마셨을 때 최대 값(<code class="highlighter-rouge">dp[n-3]</code>)을 더해주는 것입니다.</p>
    </blockquote>
  </li>
  <li>마지막 이전의 포도주를 마시지 않는다.
    <blockquote>
      <p><code class="highlighter-rouge">dp[n] = arr[n] + dp[n-2]</code> <br />
마지막 포도주만 마셨으므로 마지막에서 뒤로 세번째 포도까지 마셨을 때의 최대값(<code class="highlighter-rouge">dp[n-2]</code>)을 더해주면 됩니다.</p>
    </blockquote>
  </li>
</ol>

<p>하지만 잘 생각해 보았을 때 마지막 포도주를 마실 수도 있고 혹은 마지막 포도주를 안마실 수도 있습니다. 그렇기 때문에 마지막 포도주까지 마셨을 때와 안마셨을 때를 비교해서 더 높은 값을 결정합니다.</p>
<blockquote>
  <p><code class="highlighter-rouge">dp[n] = max(dp[n], dp[n-1])</code></p>
</blockquote>

<p>이를 통해서 우리는 최대 값을 구할 수 있게 되었습니다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// dp[n] = dp[n-3] + array[n] + array[n-1];</span>
<span class="c1">// dp[n] = dp[n-2] + array[n];</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">DP</span><span class="p">[</span><span class="mi">10001</span><span class="p">],</span> <span class="n">ARR</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ARR</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="n">DP</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">ARR</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="n">DP</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">ARR</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">ARR</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DP</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">DP</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">ARR</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">ARR</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">DP</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">ARR</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">DP</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">DP</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">DP</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">DP</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET